{
	"info": {
		"_postman_id": "2555f881-7a3b-4fe0-b8a8-4d58c542fdf0",
		"name": "API Automation - POC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6072137"
	},
	"item": [
		{
			"name": "Common Reusable Snippets",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Common methods for Test script",
							"",
							"postman.setEnvironmentVariable(\"utils\", () => {",
							"",
							"    // Function to verify success status code 200",
							"    var verifySuccessStatusCode200 = () => {",
							"        pm.response.to.have.status(200);",
							"    }",
							"",
							"    // Function to verify OK status",
							"    var verifyOKSuccessStatus = () => {",
							"        pm.response.to.have.status(\"OK\");",
							"    }",
							"",
							"    // Function to verify multiple status code",
							"    var verifyMultipleStatusCode = (s1,s2) => {",
							"        pm.expect(pm.response.code).to.be.oneOf([s1,s2]);",
							"    }",
							"",
							"    // Function to verify response message",
							"    var verifyResponseMessage = (actual,expected) => {",
							"        pm.expect(actual).not.eql(undefined);",
							"        pm.expect(actual).not.eql(null);",
							"        pm.expect(actual).not.eql(\"\");",
							"        pm.expect(actual).to.eql(expected);",
							"    }",
							"",
							"     // Function to verify response key is not undefined",
							"    var verifyResponseKeyIsNotUndefined = (keyName) => {",
							"        pm.expect(keyName).not.eql(undefined);",
							"        }",
							"",
							"        // Function to verify response key is not null",
							"    var verifyResponseKeyIsNoNull = (keyName) => {",
							"        pm.expect(keyName).not.eql(null);",
							"        }",
							"",
							"        // Function to verify response time below a given value in millisecond",
							"    var verifyResponseTimeBelowThanAValue = (maxResponseTime) => {",
							"        pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
							"    }",
							"",
							"    // Function to verify response time above a given value in millisecond",
							"    var verifyResponseTimeAboveThanAValue = (minResponseTime) => {",
							"        pm.expect(pm.response.responseTime).to.be.above(minResponseTime);",
							"    }",
							"",
							"    // Function to verify response time is in between millisecond",
							"    var verifyResponseTimeIsInBetweenTheValue = (minResponseTime, maxResponseTime) => {",
							"        pm.expect(_.inRange(pm.response.responseTime,minResponseTime,maxResponseTime)).to.eql(true);",
							"    }",
							"",
							"    // Function to verify response size should not be zero",
							"    var verifyResponseSizeIsNotZero = () => {",
							"        pm.expect(pm.response.responseSize).to.not.eql(0);",
							"        }",
							"",
							"        // Function to verify partial text of the response",
							"    var verifyPartialTextOfTheResponse = (expectedResponseValue) => {",
							"        pm.expect(pm.response.text()).to.include(expectedResponseValue);",
							"        }",
							"",
							"        // Function to store json response value",
							"    var storeJsonResponseValue = (globalVariableName,jsonResponseKeyName) => {",
							"        postman.setEnvironmentVariable(globalVariableName,jsonResponseKeyName);",
							"        }",
							"",
							"      // Function to set next request",
							"    var setNextRequest = (requestName) => {",
							"        postman.setNextRequest(requestName);",
							"        }",
							"",
							"        return ",
							"        {",
							"            myPackage : {",
							"                verifySuccessStatusCode200,",
							"                verifyOKSuccessStatus,",
							"                verifyMultipleStatusCode,",
							"                verifyResponseMessage,",
							"                verifyResponseKeyIsNotUndefined,",
							"                verifyResponseKeyIsNoNull,",
							"                verifyResponseTimeBelowThanAValue,",
							"                verifyResponseTimeAboveThanAValue,",
							"                verifyResponseTimeIsInBetweenTheValue,",
							"                verifyResponseSizeIsNotZero,",
							"                verifyPartialTextOfTheResponse,",
							"                storeJsonResponseValue,",
							"                setNextRequest",
							"            }",
							"",
							"        };",
							"});",
							"",
							"// Common method for payload - body",
							"",
							"//Positive Scenarios - Minimum Range",
							"",
							"//Set random email",
							"var randomEmail = randomAlphanumeric(7) + '@domain.com'",
							"pm.globals.set('randomEmail', randomEmail);",
							"",
							"//Function to generate random numbers",
							"function randomNumber(n) {",
							"    return Math.floor(Math.pow(10, n - 1) + Math.random() * 9 * Math.pow(10, n - 1));",
							"}",
							"",
							"// Generate minimum possible length number for a field - Positive",
							"var minNumber = randomNumber(3).toString();",
							"pm.globals.set(\"minNumber\", minNumber);",
							"",
							"//Function to generate random float",
							"function randomFloat(min, max) {",
							"    return Math.random() * (max - min) + min;",
							"}",
							"",
							"// Generate minimum possible length float for a field - Positive",
							"var minFloat = randomFloat(1, 5).toFixed(3);",
							"pm.globals.set(\"minFloat\", minFloat);",
							"",
							"//Function to generate random alpha numeric",
							"function randomAlphanumeric(length) {",
							"    var result = '';",
							"    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate minimum possible length Alphanumeric for a field - Positive",
							"var minAlphanumeric = randomAlphanumeric(3);",
							"pm.globals.set(\"minAlphanumeric\", minAlphanumeric);",
							"",
							"// Function to generate random string",
							"function randomString(length) {",
							"    var result = '';",
							"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate minimum possible length String for a field - Positive",
							"var minString = randomString(3);",
							"pm.globals.set(\"minString\", minString);",
							"",
							"// Function to generate random capital letters of string",
							"function randomCapitalString(length) {",
							"    var result = '';",
							"    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate minimum possible length capital letters of String for a field - Positive",
							"var minCapitalString = randomCapitalString(3);",
							"pm.globals.set(\"minCapitalString\", minCapitalString);",
							"",
							"// Function to generate random small letters of string",
							"function randomSmallString(length) {",
							"    var result = '';",
							"    var chars = 'abcdefghijklmnopqrstuvwxyz';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate minimum possible length small letters of String for a field - Positive",
							"var minSmallString = randomSmallString(3);",
							"pm.globals.set(\"minSmallString\", minSmallString);",
							"",
							"//Positive Scenarios - Maximum Range",
							"",
							"//Set random email",
							"var randomEmail = randomAlphanumeric(7) + '@domain.com'",
							"pm.globals.set('randomEmail', randomEmail);",
							"",
							"//Function to generate random numbers",
							"function randomNumber(n) {",
							"    return Math.floor(Math.pow(10, n - 1) + Math.random() * 9 * Math.pow(10, n - 1));",
							"}",
							"",
							"// Generate maximum possible length number for a field - Positive",
							"var maxNumber = randomNumber(15).toString();",
							"pm.globals.set(\"maxNumber\", maxNumber);",
							"",
							"//Function to generate random float",
							"function randomFloat(min, max) {",
							"    return Math.random() * (max - min) + min;",
							"}",
							"",
							"// Generate maximum possible length float for a field - Positive",
							"var maxFloat = randomFloat(15, 35).toFixed(12);",
							"pm.globals.set(\"maxFloat\", maxFloat);",
							"",
							"//Function to generate random alpha numeric",
							"function randomAlphanumeric(length) {",
							"    var result = '';",
							"    var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate maximum possible length Alphanumeric for a field - Positive",
							"var maxAlphanumeric = randomAlphanumeric(15);",
							"pm.globals.set(\"maxAlphanumeric\", maxAlphanumeric);",
							"",
							"// Function to generate random string",
							"function randomString(length) {",
							"    var result = '';",
							"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate maximum possible length String for a field - Positive",
							"var maxString = randomString(15);",
							"pm.globals.set(\"maxString\", maxString);",
							"",
							"// Function to generate random capital letters of string",
							"function randomCapitalString(length) {",
							"    var result = '';",
							"    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate maximum possible length capital letters of String for a field - Positive",
							"var maxCapitalString = randomCapitalString(15);",
							"pm.globals.set(\"maxCapitalString\", maxCapitalString);",
							"",
							"// Function to generate random small letters of string",
							"function randomSmallString(length) {",
							"    var result = '';",
							"    var chars = 'abcdefghijklmnopqrstuvwxyz';",
							"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
							"    return result;",
							"}",
							"",
							"// Generate maximum possible length small letters of String for a field - Positive",
							"var maxSmallString = randomSmallString(15);",
							"pm.globals.set(\"maxSmallString\", maxSmallString);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://vpic.nhtsa.dot.gov/api/vehicles/getallmanufacturers?format=json",
					"protocol": "https",
					"host": [
						"vpic",
						"nhtsa",
						"dot",
						"gov"
					],
					"path": [
						"api",
						"vehicles",
						"getallmanufacturers"
					],
					"query": [
						{
							"key": "format",
							"value": "json"
						}
					]
				}
			},
			"response": []
		}
	]
}